name: CI

on:
  push:
    branches: [main]
    tags: [v*]
  pull_request:
  workflow_dispatch:
  schedule:
    # run every week (for --pre release tests)
    - cron: "0 0 * * 0"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-manifest:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: pipx run check-manifest

  test:
    name: ${{ matrix.platform }} py${{ matrix.python-version }}
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        include:
          - platform: macos-13
            python-version: "3.12"

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[test]

      - name: Set cache path
        shell: bash
        run: |
          set -e
          CACHE_PATH=$(python -c 'from pymmcore_plus import install; print(install.USER_DATA_MM_PATH)')
          echo "CACHE_PATH=$CACHE_PATH" >> $GITHUB_ENV

      - name: Cache Drivers
        id: cache-mm-build
        uses: actions/cache@v4
        with:
          path: ${{ env.CACHE_PATH }}
          key: ${{ runner.os }}-mmbuild-${{ hashFiles('src/pymmcore_plus/_build.py') }}

      - name: Install Micro-Manager
        if: steps.cache-mm-build.outputs.cache-hit != 'true'
        run: mmcore install

      - name: Test
        run: pytest -v --color=yes --cov=pymmcore_plus --cov-report=xml

      - name: Coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  deploy:
    name: Deploy
    needs: test
    if: success() && startsWith(github.ref, 'refs/tags/') && github.event_name != 'schedule'
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: üë∑ Build
        run: |
          python -m pip install build
          python -m build

      - name: üö¢ Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

      - uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: './dist/*'
